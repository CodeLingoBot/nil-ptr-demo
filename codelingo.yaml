funcs:
  - name: sameType
    type: asserter
    body: |
      function(type1, type2) {
          type1_pieces = type1.substring(1).split('/')
          type2_pieces = type2.split('/')
          return type1_pieces[type1_pieces.length-1] == type2_pieces[type2_pieces.length-1]
      }
tenets:
  - name:  potential-nil-pointer
    actions:
      codelingo/docs:
        title: Potential nil pointer 
        body: |
          Any returned object from a call to a function returning nil should be checked if it is non-nil. Otherwise, a nil pointer panic happens.
      codelingo/review:
        comment: Variable `{{pnp}}` could be nil and a selector operator would cause a nil pointer panic
    query: |
      import codelingo/ast/go

      go.func_decl(depth = any):
        go.ident:
          name as funcName
        go.func_type:
          go.field_list:
            sibling_order == 1
            go.field:
              go.star_expr:
                go.ident:
                  type as returnType
        go.block_stmt:
          go.return_stmt(depth = any):
            go.results:
              go.ident:
                name == "nil"

      go.func_decl(depth = any):
        go.assign_stmt(depth = any):
          go.lhs:
            go.ident:
              type as returnedType
              sameType(returnedType,returnType)
              name as pnp
          go.rhs:
            go.call_expr:
              go.ident(depth = any):
                name == funcName
        go.selector_expr(depth = any):
          @review comment
          go.ident:
            start_offset as varStartOffset
            sibling_order == 0
            name == pnp
        exclude:
          go.if_stmt(depth = any):
            go.binary_expr:
              op == '!='
              go.ident:
                name == pnp
              go.ident:
                name == "nil"
            go.block_stmt:
              go.ident(depth = any):
                name == pnp
                start_offset == varStartOffset
          go.if_stmt(depth = any): 
            go.binary_expr:
              op == '=='
              go.ident:
                # TODO Check offset to make sure compare with nil condition is before selector
                name == pnp
              go.ident:
                name == "nil"
